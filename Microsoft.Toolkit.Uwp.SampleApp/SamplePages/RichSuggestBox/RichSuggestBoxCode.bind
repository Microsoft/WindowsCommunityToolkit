private async void SuggestingBox_OnTokenHovered(RichSuggestBox sender, RichSuggestTokenHoveredEventArgs args)
{
  await Task.Delay(1);
  var flyout = (Flyout)FlyoutBase.GetAttachedFlyout(sender);
  if (flyout?.Content is ContentPresenter cp && sender.TextDocument.Selection.Type != SelectionType.Normal &&
    (!flyout.IsOpen || cp.Content != args.Token.Item))
  {
    cp.Content = args.Token.Item;
    flyout.ShowAt(sender, new FlyoutShowOptions
    {
      Position = args.CurrentPoint.Position,
      ExclusionRect = args.Rect,
      ShowMode = FlyoutShowMode.TransientWithDismissOnPointerMoveAway
    });
  }
}

private void SuggestingBox_OnSuggestionChosen(RichSuggestBox sender, SuggestionChosenEventArgs args)
{
  if (args.Prefix == "#")
  {
    args.Format.Background = Colors.DarkOrange;
    args.Format.Foreground = Colors.OrangeRed;
    args.Text = ((SampleDataType)args.SelectedItem).Text;
  }
  else
  {
    args.Text = ((SampleEmailDataType)args.SelectedItem).DisplayName;
  }
}

private void SuggestingBox_OnSuggestionsRequested(RichSuggestBox sender, SuggestionsRequestedEventArgs args)
{
  if (args.Prefix == "#")
  {
    sender.ItemsSource =
      this._samples.Where(x => x.Text.Contains(args.Query, StringComparison.OrdinalIgnoreCase));
  }
  else
  {
    sender.ItemsSource =
      this._emailSamples.Where(x => x.DisplayName.Contains(args.Query, StringComparison.OrdinalIgnoreCase));
  }
}